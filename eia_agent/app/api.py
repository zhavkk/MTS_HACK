from fastapi import HTTPException, status, Depends, APIRouter
from aiohttp import TCPConnector
import aiohttp
from logic import fetch_result, EMOTION_PROMPT, INTENT_PROMPT
from model import User, HistoryItem, Response
from logger import logger
from redis import Redis
import os
from dotenv import load_dotenv
import asyncio

router = APIRouter()

load_dotenv()

REDIS_PORT = os.getenv("REDIS_PORT")
REDIS_HOST = os.getenv("REDIS_HOST")


def get_redis() -> Redis:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Redis-–∫–ª–∏–µ–Ω—Ç –∏–ª–∏ –≤–æ–∑–±—É–∂–¥–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
    """
    try:
        redis_client = Redis(host=REDIS_HOST, port=REDIS_PORT, decode_responses=True)
        redis_client.ping()
        return redis_client
    except ConnectionError as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")
        raise HTTPException(status_code=status.HTTP_503_SERVICE_UNAVAILABLE)


@router.post("/analyze", response_model=Response, status_code=status.HTTP_200_OK)
async def analyze_message(request: User, redis: Redis = Depends(get_redis)) -> Response:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    - –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ Redis –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
    - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
    - –û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é Redis —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    try:
        key = f"history:{request.id}"
        records = redis.lrange(key, -1, -1)

        if not records:
            logger.warning(f"‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ –¥–ª—è user-{request.id}")
            raise HTTPException(status_code=400, detail="History is empty")

        user_message = HistoryItem.parse_raw(records[0]).message
        logger.info(f"üì® user-{request.id} message: {user_message}")

        if not user_message:
            logger.warning(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è user-{request.id}")
            raise HTTPException(status_code=400, detail="Message not found in history")

        connector = TCPConnector(ssl=False)

        async with aiohttp.ClientSession(connector=connector) as session:
            emotion_task = fetch_result(session, EMOTION_PROMPT, user_message)
            intent_task = fetch_result(session, INTENT_PROMPT, user_message)
            emotion_result, intent_result = await asyncio.gather(emotion_task, intent_task)

        logger.info(
            f"‚úÖ user-{request.id} ‚Äî emotion: {emotion_result['emotion']}, "
            f"intent: {intent_result['intent']}"
        )

        new_history_item = HistoryItem(
            role="user",
            message=user_message,
            emotion=emotion_result["emotion"],
            intern=intent_result["intent"]
        )

        redis.lset(key, -1, new_history_item.json())
        logger.info(f"üíæ –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è user-{request.id}")

        return Response(user_id=request.id, message="Successfully done")

    except aiohttp.ClientError as e:
        logger.error(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Network error: {str(e)}")

    except Exception as e:
        logger.error(f"üî• –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")
