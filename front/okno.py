import streamlit as st
import requests
import time
import json
from datetime import datetime
import os
from dotenv import load_dotenv

load_dotenv()

API_URL = os.getenv("BACKEND_URL", "http://backend:8000")
POLL_INTERVAL = int(os.getenv("POLL_INTERVAL", "2"))
DEBUG = os.getenv("DEBUG", "False").lower() == "true"

if "session_id" not in st.session_state:
    try:
        response = requests.post(f"{API_URL}/sessions")
        if response.status_code == 200:
            st.session_state.session_id = response.json()["session_id"]
            st.session_state.messages = []
            st.session_state.recommendations = []
            st.session_state.last_update = datetime.now().timestamp()
            st.session_state.debug_info = []
            print(f"Created new session: {st.session_state.session_id}")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {str(e)}")

def fetch_updates():
    if "session_id" in st.session_state:
        try:
            print(f"Fetching updates for session: {st.session_state.session_id}")
            response = requests.get(
                f"{API_URL}/sessions/{st.session_state.session_id}/updates"
            )
            if response.status_code == 200:
                data = response.json()
                
                st.session_state.debug_info.append({
                    "timestamp": datetime.now().strftime("%H:%M:%S"),
                    "messages_count": len(data.get("messages", [])),
                    "messages": data.get("messages", []),
                    "recommendations_count": len(data.get("recommendations", [])),
                    "session_id": st.session_state.session_id
                })
                
                if len(st.session_state.debug_info) > 10:
                    st.session_state.debug_info = st.session_state.debug_info[-10:]
                
                messages = data.get("messages", [])
                for msg in messages:
                    if "role" not in msg:
                        msg["role"] = "user"
                
                st.session_state.messages = messages
                st.session_state.recommendations = data.get("recommendations", [])
                st.session_state.last_update = datetime.now().timestamp()
                return True
            elif response.status_code == 404:
                print(f"Session {st.session_state.session_id} not found")
                st.error("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.")
                return False
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)}")
            return False
    return False

def send_operator_message(message):
    if "session_id" in st.session_state and message:
        try:
            print(f"Sending message to session: {st.session_state.session_id}")
            response = requests.post(
                f"{API_URL}/sessions/{st.session_state.session_id}/messages",
                json={"content": message, "role": "operator"}
            )
            if response.status_code == 200:
                operator_message = {
                    "content": message,
                    "timestamp": datetime.now().isoformat(),
                    "role": "operator"
                }
                st.session_state.messages.append(operator_message)
                return True
            elif response.status_code == 404:
                print(f"Session {st.session_state.session_id} not found, creating new one")
                new_response = requests.post(f"{API_URL}/sessions")
                if new_response.status_code == 200:
                    st.session_state.session_id = new_response.json()["session_id"]
                    st.session_state.messages = []
                    st.session_state.recommendations = []
                    print(f"Created new session: {st.session_state.session_id}")
                    return send_operator_message(message)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
    return False

st.title("üí¨ –ö–æ–Ω—Ç–∞–∫—Ç-—Ü–µ–Ω—Ç—Ä: –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")

with st.sidebar:
    if st.button("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"):
        fetch_updates()
        st.rerun()
    
    if st.button("üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é"):
        try:
            response = requests.post(f"{API_URL}/sessions")
            if response.status_code == 200:
                st.session_state.session_id = response.json()["session_id"]
                st.session_state.messages = []
                st.session_state.recommendations = []
                st.session_state.last_update = datetime.now().timestamp()
                st.success(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {st.session_state.session_id}")
                st.rerun()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {str(e)}")
   #print(f"session_state: {st.session_state}")
    if st.button("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é") and "session_id" in st.session_state:
        print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏: {st.session_state.session_id}")
        try:
            response = requests.post(
                f"{API_URL}/sessions/{st.session_state.session_id}/complete"
            )
            if response.status_code == 200:
                st.success("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                st.session_state.clear()
            else:
                st.error("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    with st.expander("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
        st.write(f"ID —Å–µ—Å—Å–∏–∏: {st.session_state.get('session_id', '–ù–µ—Ç')}")
        st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(st.session_state.get('messages', []))}")
        st.write(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.fromtimestamp(st.session_state.get('last_update', 0)).strftime('%H:%M:%S')}")
        
        if st.session_state.get("debug_info"):
            st.write("–ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:")
            for info in st.session_state.debug_info:
                st.write(f"{info['timestamp']}: {info['messages_count']} —Å–æ–æ–±—â–µ–Ω–∏–π, {info['recommendations_count']} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (—Å–µ—Å—Å–∏—è: {info['session_id']})")
                if info['messages_count'] > 0:
                    st.write(f"–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: {info['messages'][0]}")
        
        if st.session_state.get("messages"):
            st.write("–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
            for i, msg in enumerate(st.session_state.messages):
                st.write(f"{i+1}. {msg}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
col1, col2 = st.columns([2, 1])

with col1:
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞")
    if st.session_state.get("messages"):
        for msg in st.session_state.messages:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è
            role = msg.get("role", "user")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            with st.chat_message(role):
                st.markdown(msg["content"])
                st.caption(datetime.fromisoformat(msg["timestamp"]).strftime("%H:%M:%S"))
    else:
        st.info("–î–∏–∞–ª–æ–≥ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç")
    
    # –§–æ—Ä–º–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    with st.form(key="message_form"):
        operator_message = st.text_input("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", key="operator_input")
        submit_button = st.form_submit_button(label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        
        if submit_button and operator_message and operator_message.strip():
            if send_operator_message(operator_message):
                st.rerun()

with col2:
    st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã")
    if st.session_state.get("recommendations"):
        for i, rec in enumerate(st.session_state.recommendations):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–µ–º
            if isinstance(rec, str):
                with st.expander(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è #{i+1}"):
                    st.write(rec)
            else:
                with st.expander(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {rec.get('intent', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"):
                    st.write(f"**–≠–º–æ—Ü–∏—è:** {rec.get('emotion', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                    st.write("**–î–µ–π—Å—Ç–≤–∏—è:**")
                    for action in rec.get('actions', []):
                        st.write(f"- {action}")
                    st.write(f"**–ó–Ω–∞–Ω–∏—è:** {rec.get('knowledge', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
    else:
        st.info("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

# –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º Streamlit
fetch_updates()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
time.sleep(POLL_INTERVAL)
st.rerun()