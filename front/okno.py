import streamlit as st
import requests
import time
from datetime import datetime
import os
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_URL = os.getenv("API_URL", "http://backend:8000")
POLL_INTERVAL = 2  # seconds

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
def init_state():
    if 'client_msgs' not in st.session_state:
        st.session_state.client_msgs = []
    if 'agent_suggestions' not in st.session_state:
        st.session_state.agent_suggestions = {}
    if 'operator_responses' not in st.session_state:
        st.session_state.operator_responses = []
    if 'last_update' not in st.session_state:
        st.session_state.last_update = time.time()

init_state()

# –§—É–Ω–∫—Ü–∏–∏ API
def fetch_updates():
    try:
        response = requests.get(
            f"{API_URL}/updates",
            params={"since": st.session_state.last_update}
        )
        if response.status_code == 200:
            data = response.json()
            return data
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
    return None

def send_operator_response(response_text):
    payload = {
        "message": response_text,
        "suggestions": st.session_state.agent_suggestions.get(
            len(st.session_state.client_msgs)-1, {}
        )
    }
    requests.post(f"{API_URL}/responses", json=payload)

st.title("üìû –ö–æ–Ω—Ç–∞–∫—Ç-—Ü–µ–Ω—Ç—Ä: –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
st.markdown("---")

# –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
left_col, right_col = st.columns([2, 1])

with left_col:
    st.subheader("–î–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º")
    dialog_container = st.container()
    
    with dialog_container:
        for idx, msg in enumerate(st.session_state.client_msgs):
            with st.chat_message("user"):
                st.markdown(f"**–ö–ª–∏–µ–Ω—Ç:** {msg['text']}")
                st.caption(msg['timestamp'])
                
            if idx in st.session_state.operator_responses:
                with st.chat_message("assistant"):
                    resp = st.session_state.operator_responses[idx]
                    st.markdown(f"**–û–ø–µ—Ä–∞—Ç–æ—Ä:** {resp['text']}")
                    st.caption(resp['timestamp'])

with right_col:
    st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã")
    suggestions_container = st.container()
    
    with suggestions_container:
        if st.session_state.agent_suggestions:
            last_idx = max(st.session_state.agent_suggestions.keys())
            suggestion = st.session_state.agent_suggestions[last_idx]
            
            st.json({
                "–ò–Ω—Ç–µ–Ω—Ç": suggestion.get('intent', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'),
                "–≠–º–æ—Ü–∏—è": suggestion.get('emotion', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'),
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è": suggestion.get('actions', []),
                "–°–ø—Ä–∞–≤–∫–∞": suggestion.get('knowledge', '')
            })

# –ú–µ—Ö–∞–Ω–∏–∑–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
def update_interface():
    updates = fetch_updates()
    if updates:
        for msg in updates.get('new_messages', []):
            st.session_state.client_msgs.append({
                "text": msg['content'],
                "timestamp": datetime.fromisoformat(msg['timestamp']).strftime("%H:%M:%S")
            })
            st.session_state.agent_suggestions[len(st.session_state.client_msgs)-1] = {
                "intent": msg['metadata']['intent'],
                "emotion": msg['metadata']['emotion'],
                "actions": msg['metadata']['actions'],
                "knowledge": msg['metadata']['knowledge_response']
            }
        st.session_state.last_update = time.time()
        st.experimental_rerun()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
response_text = st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç...")
if response_text:
    send_operator_response(response_text)
    st.session_state.operator_responses.append({
        "text": response_text,
        "timestamp": datetime.now().strftime("%H:%M:%S")
    })
    st.experimental_rerun()

# –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
while True:
    update_interface()
    time.sleep(POLL_INTERVAL)